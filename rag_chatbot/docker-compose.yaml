version: "3.9"

services:
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11435:11434"  # 표준 Ollama 포트로 수정
    volumes:
      - ./ollama_models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama 모델 빌드 초기화 컨테이너
  ollama-init:
    image: ollama/ollama:latest
    container_name: ollama-init
    volumes:
      - ./ollama_models:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    command: >
      sh -c "
        echo 'Waiting for Ollama to be ready...' &&
        sleep 10 &&
        echo 'Building SmolLM3-3B-GGUF model from local GGUF file...' &&
        cd /root/.ollama/SmolLM3-3B-GGUF &&
        ollama create smollm3-3b -f Modelfile &&
        echo 'Model build completed!' &&
        ollama list
      "
    depends_on:
      ollama:
        condition: service_healthy
    restart: "no"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - ./vector_data:/qdrant/storage  # 스토리지 경로 수정
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:6333/readyz"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  backend:
    build:
      context: ./
      dockerfile: Dockerfile.cpu
    container_name: rag-backend
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=smollm3-3b
      - DATA_DIR=/app/data
      - EMBEDDING_MODEL_NAME=/app/embedding_models/BGE-m3-ko
      - LOG_LEVEL=INFO
    volumes:
      - ./embedding_models:/app/embedding_models
      - ./data:/app/data
      - ./vector_data:/app/vector_data
    ports:
      - "8000:8000"
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
      ollama-init:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  default:
    name: rag-network

